@page "/admin"
@using DragaliaBaasServer.Database.Repositories
@using DragaliaBaasServer.Models.Backend
@using DragaliaBaasServer.Models.Web
@using System.Security.Claims
@inject IAccountRepository Repository

<PageTitle>Authorize</PageTitle>

<h1 class="title">Admin interface</h1>

<div class="mainpage">
    <AuthorizeView>
        <Authorized>
            @if (context.User.HasClaim(ClaimTypes.Role, "Administrator"))
            {
                <div>
                    Counts: @_deviceCount Devices, @_userCount Users, @_webUsers.Count WebUsers
                    <a href="/admin2">Admin Panel 2</a>
                    <a href="/admin3">Admin Panel 3</a>
                </div>
                <TableTemplate Items="_webUsers" Context="user">
                    <TableHeader>
                        <th>ID</th>
                        <th>Username</th>
                    </TableHeader>
                    <RowTemplate>
                        <td>@user.Id</td>
                        <td>@user.Username</td>
                        <button class="button-href" @onclick="() => RemoveWebUser(user)">Delete</button>
                    </RowTemplate>
                </TableTemplate>
            }
            else
            {
                <h3>no admin panel for you hehe</h3>
                <a href="https://youareanidiot.cc">Click here for some other interesting admin links :)</a>
            }
        </Authorized>
    </AuthorizeView>
</div>

@code {
    /*
     *  <TableTemplate Items="_devices" Context="device">
           <TableHeader>
               <th>ID</th>
               <th>Linked User Account</th>
           </TableHeader>
           <RowTemplate>
               <td>@device.Id</td>
               <td>@_users.First(uAccount => uAccount.AssociatedDeviceAccounts.Contains(device)).Id</td>
               <button class="button-href" @onclick="() => RemoveDevice(device)">Delete</button>
           </RowTemplate>
       </TableTemplate>
     */

    //private List<DeviceAccount> _devices = new();
    //private List<UserAccount> _users = new();
    private List<WebUserAccount> _webUsers = new();

    private int _deviceCount;
    private int _userCount;

    protected override async Task OnInitializedAsync()
    {
        _deviceCount = Repository.GetDeviceAccounts().Count();
        _userCount = Repository.GetUserAccounts().Count();
        _webUsers = Repository.GetWebUserAccounts().ToList();
    }

    private async Task RemoveWebUser(WebUserAccount webUser)
        => await RemoveAccount(webUser, Repository.RemoveWebUserAccount, _webUsers);

    private async Task RemoveAccount<T>(T account, Action<T> remove, List<T> collection)
    {
        remove(account);
        await Repository.SaveChangesAsync();
        collection.Remove(account);
    }

}